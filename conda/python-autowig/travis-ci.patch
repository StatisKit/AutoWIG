diff --git a/conda/python-autowig/macosx.patch b/conda/python-autowig/macosx.patch
index daf02f3..bad121c 100644
--- a/conda/python-autowig/macosx.patch
+++ b/conda/python-autowig/macosx.patch
@@ -1,3 +1,394 @@
+diff --git a/conda/python-autowig/macosx.patch b/conda/python-autowig/macosx.patch
+index daf02f3..e69de29 100644
+--- a/conda/python-autowig/macosx.patch
++++ b/conda/python-autowig/macosx.patch
+@@ -1,162 +0,0 @@
+-diff --git a/test/test_feedback.py b/test/test_feedback.py
+-deleted file mode 100644
+-index eb09168..0000000
+---- a/test/test_feedback.py
+-+++ /dev/null
+-@@ -1,156 +0,0 @@
+--##################################################################################
+--#                                                                                #
+--# AutoWIG: Automatic Wrapper and Interface Generator                             #
+--#                                                                                #
+--# Homepage: http://autowig.readthedocs.io                                        #
+--#                                                                                #
+--# Copyright (c) 2016 Pierre Fernique                                             #
+--#                                                                                #
+--# This software is distributed under the CeCILL-C license. You should have       #
+--# received a copy of the legalcode along with this work. If not, see             #
+--# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
+--#                                                                                #
+--# File authors: Pierre Fernique <pfernique@gmail.com> (5)                        #
+--#                                                                                #
+--##################################################################################
+--
+--import unittest
+--import subprocess
+--from path import path
+--
+--import autowig
+--
+--class TestFeedback(unittest.TestCase):
+--    """Test the feedback of a SCons results"""
+--
+--    @classmethod
+--    def setUpClass(cls):
+--        with open('test.h', 'w') as filehandler:
+--            filehandler.write("""
+--#include <string>
+--
+--namespace test
+--{
+--    template<class T, class U>
+--    class Pair
+--    {
+--        public:
+--            Pair(const std::string& first, const std::string& second)
+--            { 
+--                this->first = first;
+--                this->second = second;
+--            };
+--
+--            void swap(const Pair< T, U >& pair)
+--            { this->first = pair.first; this->second = pair.second; }
+--
+--        protected:
+--            T first;
+--            U second;
+--    };
+--
+--    typedef Pair< const double, double > Point;
+--
+--    enum {
+--        RED,
+--        GREEN,
+--        BLUE
+--    };
+--
+--    int color;
+--}""")
+--
+--        with open('SConstruct', 'w') as filehandler:
+--            filehandler.write("""
+--from distutils import sysconfig
+--import sys
+--
+--variables = Variables()
+--
+--env = Environment()
+--variables.Update(env)
+--
+--env.AppendUnique(LIBS = ['boost_python', 'python' + sysconfig.get_python_version()])
+--env.AppendUnique(CPPPATH = [sysconfig.get_python_inc()])
+--env.AppendUnique(CPPDEFINES = ['BOOST_PYTHON_DYNAMIC_LIB'])
+--
+--env.Prepend(CPPPATH=sys.prefix + '/include')
+--env.Prepend(CPPPATH='.')
+--env.Prepend(LIBPATH=sys.prefix + '/lib')
+--
+--env.AppendUnique(CXXFLAGS = ['-x', 'c++',
+--                             '-std=c++0x',
+--                             '-Wwrite-strings'])
+--
+--pyenv = env.Clone()
+--#pyenv.AppendUnique(LIBS = ['basic'])
+--pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])
+--
+--wrap = pyenv.LoadableModule('_module', pyenv.Glob('wrapper_*.cpp') + ['_module.cpp'],
+--                            LDMODULESUFFIX = '.so',
+--                            FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress')
+--Alias("py", wrap)
+--Alias("build", wrap)
+--
+--Default("build")
+--""")
+--        autowig.parser.plugin = 'pyclanglite'
+--        autowig.generator.plugin = 'boost_python_internal'
+--        autowig.feedback.plugin = 'gcc-5'
+--        cls.srcdir = path('.').abspath()
+--
+--    def test_with_none_overload_export(self, overload="none"):
+--        """Test `feedback` with 'none' overload"""
+--
+--        for wrapper in self.srcdir.walkfiles('wrapper_*.cpp'):
+--            wrapper.unlink()
+--        wrapper = self.srcdir/'_module.h'
+--        if wrapper.exists():
+--            wrapper.unlink()
+--        wrapper = self.srcdir/'_module.py'
+--        if wrapper.exists():
+--            wrapper.unlink()
+--        wrapper = self.srcdir/'_module.cpp'
+--        if wrapper.exists():
+--            wrapper.unlink()
+--
+--        asg = autowig.AbstractSemanticGraph()
+--
+--        asg = autowig.parser(asg, [self.srcdir/'test.h'],
+--                                  ['-x', 'c++', '-std=c++11', '-I' + str(self.srcdir)],
+--                                  silent = True)
+--
+--        autowig.controller.plugin = 'default'
+--        autowig.controller(asg, overload=overload)
+--
+--        module = autowig.generator(asg, module = self.srcdir/'_module.cpp',
+--                                     decorator = self.srcdir/'_module.py',
+--                                     prefix = 'wrapper_')
+--
+--        from autowig._controller import cleaning
+--        cleaning(asg)
+--
+--        module.write()
+--
+--
+--        s = subprocess.Popen(['scons', 'py'],
+--                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+--        prev, curr = s.communicate()
+--
+--        while not prev == curr:
+--            prev = curr
+--            code = autowig.feedback(curr, '.', asg)
+--            if code:
+--                exec(code, locals())
+--
+--    def test_with_all_overload_export(self):
+--        """Test `feedback` with 'all' overload"""
+--        self.test_with_none_overload_export(overload="all")
+--
+--    def test_with_class_overload_export(self):
+--        """Test `feedback` with 'class' overload"""
+--        self.test_with_none_overload_export(overload="class")
+--
+--    def test_with_namespace_overload_export(self):
+--        """Test `feedback` with 'namespace' overload"""
+--        self.test_with_none_overload_export(overload="namespace")
+diff --git a/conda/python-autowig/windows.patch b/conda/python-autowig/windows.patch
+index 8fab893..2f74e95 100644
+--- a/conda/python-autowig/windows.patch
++++ b/conda/python-autowig/windows.patch
+@@ -1,21 +1,206 @@
++diff --git a/conda/python-autowig/windows.patch b/conda/python-autowig/windows.patch
++index 8fab893..e69de29 100644
++--- a/conda/python-autowig/windows.patch
+++++ b/conda/python-autowig/windows.patch
++@@ -1,180 +0,0 @@
++-diff --git a/test/test_basic.py b/test/test_basic.py
++-index 05c2aa3..386bd8d 100644
++---- a/test/test_basic.py
++-+++ b/test/test_basic.py
++-@@ -88,13 +88,6 @@ class TestBasic(unittest.TestCase):
++-                                         decorator = self.tgt/'basic'/'_module.py',
++-                                         prefix = 'wrapper_')
++-         wrappers.write()
++--        
++--        print(self.tgt.parent.parent)
++--        print(self.tgt.parent.parent.abspath())
++--        subprocess.check_call(['scons', 'py', '-C', self.tgt.parent.parent.abspath()])
++--
++--    def test_pyclanglite_parser(self):
++--        """Test `pyclanglite` parser"""
++-         plugin = autowig.parser.plugin
++-         autowig.parser.plugin = 'pyclanglite'
++-         self.test_mapping_export()
++-diff --git a/test/test_feedback.py b/test/test_feedback.py
++-deleted file mode 100644
++-index eb09168..0000000
++---- a/test/test_feedback.py
++-+++ /dev/null
++-@@ -1,156 +0,0 @@
++--##################################################################################
++--#                                                                                #
++--# AutoWIG: Automatic Wrapper and Interface Generator                             #
++--#                                                                                #
++--# Homepage: http://autowig.readthedocs.io                                        #
++--#                                                                                #
++--# Copyright (c) 2016 Pierre Fernique                                             #
++--#                                                                                #
++--# This software is distributed under the CeCILL-C license. You should have       #
++--# received a copy of the legalcode along with this work. If not, see             #
++--# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
++--#                                                                                #
++--# File authors: Pierre Fernique <pfernique@gmail.com> (5)                        #
++--#                                                                                #
++--##################################################################################
++--
++--import unittest
++--import subprocess
++--from path import path
++--
++--import autowig
++--
++--class TestFeedback(unittest.TestCase):
++--    """Test the feedback of a SCons results"""
++--
++--    @classmethod
++--    def setUpClass(cls):
++--        with open('test.h', 'w') as filehandler:
++--            filehandler.write("""
++--#include <string>
++--
++--namespace test
++--{
++--    template<class T, class U>
++--    class Pair
++--    {
++--        public:
++--            Pair(const std::string& first, const std::string& second)
++--            { 
++--                this->first = first;
++--                this->second = second;
++--            };
++--
++--            void swap(const Pair< T, U >& pair)
++--            { this->first = pair.first; this->second = pair.second; }
++--
++--        protected:
++--            T first;
++--            U second;
++--    };
++--
++--    typedef Pair< const double, double > Point;
++--
++--    enum {
++--        RED,
++--        GREEN,
++--        BLUE
++--    };
++--
++--    int color;
++--}""")
++--
++--        with open('SConstruct', 'w') as filehandler:
++--            filehandler.write("""
++--from distutils import sysconfig
++--import sys
++--
++--variables = Variables()
++--
++--env = Environment()
++--variables.Update(env)
++--
++--env.AppendUnique(LIBS = ['boost_python', 'python' + sysconfig.get_python_version()])
++--env.AppendUnique(CPPPATH = [sysconfig.get_python_inc()])
++--env.AppendUnique(CPPDEFINES = ['BOOST_PYTHON_DYNAMIC_LIB'])
++--
++--env.Prepend(CPPPATH=sys.prefix + '/include')
++--env.Prepend(CPPPATH='.')
++--env.Prepend(LIBPATH=sys.prefix + '/lib')
++--
++--env.AppendUnique(CXXFLAGS = ['-x', 'c++',
++--                             '-std=c++0x',
++--                             '-Wwrite-strings'])
++--
++--pyenv = env.Clone()
++--#pyenv.AppendUnique(LIBS = ['basic'])
++--pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])
++--
++--wrap = pyenv.LoadableModule('_module', pyenv.Glob('wrapper_*.cpp') + ['_module.cpp'],
++--                            LDMODULESUFFIX = '.so',
++--                            FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress')
++--Alias("py", wrap)
++--Alias("build", wrap)
++--
++--Default("build")
++--""")
++--        autowig.parser.plugin = 'pyclanglite'
++--        autowig.generator.plugin = 'boost_python_internal'
++--        autowig.feedback.plugin = 'gcc-5'
++--        cls.srcdir = path('.').abspath()
++--
++--    def test_with_none_overload_export(self, overload="none"):
++--        """Test `feedback` with 'none' overload"""
++--
++--        for wrapper in self.srcdir.walkfiles('wrapper_*.cpp'):
++--            wrapper.unlink()
++--        wrapper = self.srcdir/'_module.h'
++--        if wrapper.exists():
++--            wrapper.unlink()
++--        wrapper = self.srcdir/'_module.py'
++--        if wrapper.exists():
++--            wrapper.unlink()
++--        wrapper = self.srcdir/'_module.cpp'
++--        if wrapper.exists():
++--            wrapper.unlink()
++--
++--        asg = autowig.AbstractSemanticGraph()
++--
++--        asg = autowig.parser(asg, [self.srcdir/'test.h'],
++--                                  ['-x', 'c++', '-std=c++11', '-I' + str(self.srcdir)],
++--                                  silent = True)
++--
++--        autowig.controller.plugin = 'default'
++--        autowig.controller(asg, overload=overload)
++--
++--        module = autowig.generator(asg, module = self.srcdir/'_module.cpp',
++--                                     decorator = self.srcdir/'_module.py',
++--                                     prefix = 'wrapper_')
++--
++--        from autowig._controller import cleaning
++--        cleaning(asg)
++--
++--        module.write()
++--
++--
++--        s = subprocess.Popen(['scons', 'py'],
++--                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
++--        prev, curr = s.communicate()
++--
++--        while not prev == curr:
++--            prev = curr
++--            code = autowig.feedback(curr, '.', asg)
++--            if code:
++--                exec(code, locals())
++--
++--    def test_with_all_overload_export(self):
++--        """Test `feedback` with 'all' overload"""
++--        self.test_with_none_overload_export(overload="all")
++--
++--    def test_with_class_overload_export(self):
++--        """Test `feedback` with 'class' overload"""
++--        self.test_with_none_overload_export(overload="class")
++--
++--    def test_with_namespace_overload_export(self):
++--        """Test `feedback` with 'namespace' overload"""
++--        self.test_with_none_overload_export(overload="namespace")
+ diff --git a/test/test_basic.py b/test/test_basic.py
+-index 05c2aa3..386bd8d 100644
++index e911242..a88bb54 100644
+ --- a/test/test_basic.py
+ +++ b/test/test_basic.py
+-@@ -88,13 +88,6 @@ class TestBasic(unittest.TestCase):
+-                                         decorator = self.tgt/'basic'/'_module.py',
+-                                         prefix = 'wrapper_')
+-         wrappers.write()
+--        
+--        print(self.tgt.parent.parent)
+--        print(self.tgt.parent.parent.abspath())
+--        subprocess.check_call(['scons', 'py', '-C', self.tgt.parent.parent.abspath()])
+--
++@@ -97,13 +97,6 @@ class TestBasic(unittest.TestCase):
++                               cwd=self.tgt.parent.parent,
++                               shell=True)
++ 
+ -    def test_pyclanglite_parser(self):
+ -        """Test `pyclanglite` parser"""
+-         plugin = autowig.parser.plugin
+-         autowig.parser.plugin = 'pyclanglite'
+-         self.test_mapping_export()
++-        plugin = autowig.parser.plugin
++-        autowig.parser.plugin = 'pyclanglite'
++-        self.test_mapping_export()
++-        autowig.parser.plugin = plugin
++-
++     def test_boost_python_pattern_generator(self):
++         """Test `boost_python_pattern` generator"""
++         plugin = autowig.generator.plugin
+ diff --git a/test/test_feedback.py b/test/test_feedback.py
+ deleted file mode 100644
+ index eb09168..0000000
 diff --git a/test/test_feedback.py b/test/test_feedback.py
 deleted file mode 100644
 index eb09168..0000000
diff --git a/conda/python-autowig/travis-ci.patch b/conda/python-autowig/travis-ci.patch
index 8ad83fe..55e5ebe 100644
--- a/conda/python-autowig/travis-ci.patch
+++ b/conda/python-autowig/travis-ci.patch
@@ -1,354 +0,0 @@
-diff --git a/test/test_feedback.py b/test/test_feedback.py
-deleted file mode 100644
-index eb09168..0000000
---- a/test/test_feedback.py
-+++ /dev/null
-@@ -1,156 +0,0 @@
--##################################################################################
--#                                                                                #
--# AutoWIG: Automatic Wrapper and Interface Generator                             #
--#                                                                                #
--# Homepage: http://autowig.readthedocs.io                                        #
--#                                                                                #
--# Copyright (c) 2016 Pierre Fernique                                             #
--#                                                                                #
--# This software is distributed under the CeCILL-C license. You should have       #
--# received a copy of the legalcode along with this work. If not, see             #
--# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
--#                                                                                #
--# File authors: Pierre Fernique <pfernique@gmail.com> (5)                        #
--#                                                                                #
--##################################################################################
--
--import unittest
--import subprocess
--from path import path
--
--import autowig
--
--class TestFeedback(unittest.TestCase):
--    """Test the feedback of a SCons results"""
--
--    @classmethod
--    def setUpClass(cls):
--        with open('test.h', 'w') as filehandler:
--            filehandler.write("""
--#include <string>
--
--namespace test
--{
--    template<class T, class U>
--    class Pair
--    {
--        public:
--            Pair(const std::string& first, const std::string& second)
--            { 
--                this->first = first;
--                this->second = second;
--            };
--
--            void swap(const Pair< T, U >& pair)
--            { this->first = pair.first; this->second = pair.second; }
--
--        protected:
--            T first;
--            U second;
--    };
--
--    typedef Pair< const double, double > Point;
--
--    enum {
--        RED,
--        GREEN,
--        BLUE
--    };
--
--    int color;
--}""")
--
--        with open('SConstruct', 'w') as filehandler:
--            filehandler.write("""
--from distutils import sysconfig
--import sys
--
--variables = Variables()
--
--env = Environment()
--variables.Update(env)
--
--env.AppendUnique(LIBS = ['boost_python', 'python' + sysconfig.get_python_version()])
--env.AppendUnique(CPPPATH = [sysconfig.get_python_inc()])
--env.AppendUnique(CPPDEFINES = ['BOOST_PYTHON_DYNAMIC_LIB'])
--
--env.Prepend(CPPPATH=sys.prefix + '/include')
--env.Prepend(CPPPATH='.')
--env.Prepend(LIBPATH=sys.prefix + '/lib')
--
--env.AppendUnique(CXXFLAGS = ['-x', 'c++',
--                             '-std=c++0x',
--                             '-Wwrite-strings'])
--
--pyenv = env.Clone()
--#pyenv.AppendUnique(LIBS = ['basic'])
--pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])
--
--wrap = pyenv.LoadableModule('_module', pyenv.Glob('wrapper_*.cpp') + ['_module.cpp'],
--                            LDMODULESUFFIX = '.so',
--                            FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress')
--Alias("py", wrap)
--Alias("build", wrap)
--
--Default("build")
--""")
--        autowig.parser.plugin = 'pyclanglite'
--        autowig.generator.plugin = 'boost_python_internal'
--        autowig.feedback.plugin = 'gcc-5'
--        cls.srcdir = path('.').abspath()
--
--    def test_with_none_overload_export(self, overload="none"):
--        """Test `feedback` with 'none' overload"""
--
--        for wrapper in self.srcdir.walkfiles('wrapper_*.cpp'):
--            wrapper.unlink()
--        wrapper = self.srcdir/'_module.h'
--        if wrapper.exists():
--            wrapper.unlink()
--        wrapper = self.srcdir/'_module.py'
--        if wrapper.exists():
--            wrapper.unlink()
--        wrapper = self.srcdir/'_module.cpp'
--        if wrapper.exists():
--            wrapper.unlink()
--
--        asg = autowig.AbstractSemanticGraph()
--
--        asg = autowig.parser(asg, [self.srcdir/'test.h'],
--                                  ['-x', 'c++', '-std=c++11', '-I' + str(self.srcdir)],
--                                  silent = True)
--
--        autowig.controller.plugin = 'default'
--        autowig.controller(asg, overload=overload)
--
--        module = autowig.generator(asg, module = self.srcdir/'_module.cpp',
--                                     decorator = self.srcdir/'_module.py',
--                                     prefix = 'wrapper_')
--
--        from autowig._controller import cleaning
--        cleaning(asg)
--
--        module.write()
--
--
--        s = subprocess.Popen(['scons', 'py'],
--                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
--        prev, curr = s.communicate()
--
--        while not prev == curr:
--            prev = curr
--            code = autowig.feedback(curr, '.', asg)
--            if code:
--                exec(code, locals())
--
--    def test_with_all_overload_export(self):
--        """Test `feedback` with 'all' overload"""
--        self.test_with_none_overload_export(overload="all")
--
--    def test_with_class_overload_export(self):
--        """Test `feedback` with 'class' overload"""
--        self.test_with_none_overload_export(overload="class")
--
--    def test_with_namespace_overload_export(self):
--        """Test `feedback` with 'namespace' overload"""
--        self.test_with_none_overload_export(overload="namespace")
-diff --git a/test/test_subset.py b/test/test_subset.py
-deleted file mode 100644
-index be24501..0000000
---- a/test/test_subset.py
-+++ /dev/null
-@@ -1,186 +0,0 @@
--##################################################################################
--#                                                                                #
--# AutoWIG: Automatic Wrapper and Interface Generator                             #
--#                                                                                #
--# Homepage: http://autowig.readthedocs.io                                        #
--#                                                                                #
--# Copyright (c) 2016 Pierre Fernique                                             #
--#                                                                                #
--# This software is distributed under the CeCILL-C license. You should have       #
--# received a copy of the legalcode along with this work. If not, see             #
--# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
--#                                                                                #
--# File authors: Pierre Fernique <pfernique@gmail.com> (46)                       #
--#                                                                                #
--##################################################################################
--
--import os
--import unittest
--from path import path
--from git import Repo
--import subprocess
--import sys
--import __builtin__
--
--import autowig
--
--import time
--prev = time.time()
--
--class TemplateRender(object):
--
--    def __get__(self, obj, objtype, **kwargs):
--        code = obj.code
--        code = code.replace('\n    __M_caller = context.caller_stack._push_frame()', '', 1)
--        code = code.replace('\n    __M_caller = context.caller_stack._push_frame()', '', 1)
--        code = code.replace("        return ''\n    finally:\n        context.caller_stack._pop_frame()\n", "        return __M_string\n    except:\n        return ''", 1)
--        code = code.replace("context,**pageargs", "**context", 1)
--        code = code.replace("\n        __M_locals = __M_dict_builtin(pageargs=pageargs)", "", 1)
--        code = code.replace("__M_writer = context.writer()", "__M_string = u''")
--        code = code.replace("__M_writer(", "__M_string = operator.add(__M_string, ")
--        code = "import operator\n" + code
--        exec code in globals()
--        def __call__(**context):
--            for builtin in dir(__builtin__):
--                if not builtin in context:
--                    context[builtin] = getattr(__builtin__, builtin)
--            return globals()["render_body"](**context)
--        return __call__
--
--from autowig.boost_python_generator import Template
--
--Template.render = TemplateRender()
--
--from functools import wraps
--def wrapper(f):
--    @wraps(f)
--    def execfunc(self, *args, **kwargs):
--        #global prev
--        #if time.time() - prev >= 300:
--        #    sys.stdout.write('.')
--        #    sys.stdout.flush()
--        #    prev = time.time()
--        return f(self, *args, **kwargs)
--    return execfunc
--
--from autowig import libclang_parser
--for func in dir(libclang_parser):
--    if func.startswith('read_'):
--        setattr(libclang_parser, func, wrapper(getattr(libclang_parser, func)))
--
--from clanglite import autowig_parser
--for func in dir(autowig_parser):
--    if func.startswith('read_'):
--        setattr(autowig_parser, func, wrapper(getattr(autowig_parser, func)))
--
--class TestSubset(unittest.TestCase):
--    """Test the wrapping of a library subset"""
--
--    @classmethod
--    def setUpClass(cls):
--        autowig.parser.plugin = 'libclang'
--        srcdir = path('PyClangLite')
--        Repo.clone_from('https://github.com/StatisKit/PyClangLite.git', srcdir.relpath('.'))
--        cls.srcdir = srcdir/'src'/'py'
--        subprocess.check_output(['scons', 'cpp', '--prefix=' + sys.prefix, '-C', cls.srcdir.parent.parent.abspath(), '--toolchain=' + os.environ.get('TOOLCHAIN')])
--
--    def test_libclang_parser(self):
--        """Test `libclang` parser"""
--
--        for wrapper in self.srcdir.walkfiles('*.cpp'):
--            wrapper.unlink()
--
--        prefix = path(sys.prefix)
--
--        headers = [prefix/'include'/'clanglite'/'tool.h']
--
--        asg = autowig.AbstractSemanticGraph()
--        asg = autowig.parser(asg, headers,
--                             flags = ['-x', 'c++', '-std=c++11',
--                                      '-D__STDC_LIMIT_MACROS', '-D__STDC_CONSTANT_MACROS',
--                                      '-I' + str((prefix/'include').abspath()),
--                                      '-I' + str((prefix/'include').abspath()/'python2.7')],
--                             bootstrap = False,
--                             silent = True)
--
--        def clanglite_controller(asg):
--                            
--            for node in asg['::boost::python'].classes(nested = True):
--                node.is_copyable = True
--                
--            for node in asg.classes():
--                node.boost_python_export = False
--            for node in asg.enumerations():
--                node.boost_python_export = False
--            for node in asg.enumerators():
--                if node.parent.boost_python_export:
--                    node.boost_python_export = False
--                    
--            for node in asg.functions(free = True):
--                node.boost_python_export = False
--            for node in asg.variables(free = True):
--                node.boost_python_export = False
--                
--            from autowig.default_controller import refactoring
--            asg = refactoring(asg)
--            for fct in asg['::clanglite'].functions():
--                if not fct.localname == 'build_ast_from_code_with_args':
--                    fct.parent = fct.parameters[0].qualified_type.desugared_type.unqualified_type
--            
--            subset = []
--            classes = [asg['class ::clang::Type'], asg['class ::clang::Decl']]
--            subset += classes
--            subset += classes[0].subclasses(recursive=True)
--            subset += classes[1].subclasses(recursive=True)
--            subset.append(asg['class ::llvm::StringRef'])
--            subset.append(asg['class ::clang::ASTUnit'])
--            subset.append(asg['class ::clang::ASTContext'])
--            subset.append(asg['class ::clang::FileID'])
--            subset.append(asg['class ::clang::SourceLocation'])
--            subset.append(asg['class ::clang::CXXBaseSpecifier'])
--            subset.append(asg['class ::clang::DeclContext'])
--            subset.append(asg['enum ::clang::AccessSpecifier'])
--            subset.append(asg['enum ::clang::LinkageSpecDecl::LanguageIDs'])
--            subset.append(asg['enum ::clang::BuiltinType::Kind'])
--            subset.append(asg['enum ::clang::TemplateArgument::ArgKind'])
--            subset.append(asg['enum ::clang::Decl::Kind'])
--            subset.extend(asg['::boost::python'].classes(nested = True))
--            subset.extend(asg['::boost::python'].enumerations(nested = True))
--            subset.extend(asg.nodes('::clanglite::build_ast_from_code_with_args'))
--
--            for node in subset:
--                node.boost_python_export = True
--
--            if autowig.parser.plugin == 'libclang':
--                for node in (asg.functions(pattern='.*(llvm|clang).*_(begin|end)')
--                             + asg.functions(pattern='.*(llvm|clang).*getNameAsString')
--                             + asg.nodes('::clang::NamedDecl::getQualifiedNameAsString')
--                             + asg.nodes('::clang::ObjCProtocolDecl::collectInheritedProtocolProperties')
--                             + asg.nodes('::clang::ASTUnit::LoadFromASTFile')
--                             + asg.nodes('::clang::ASTUnit::getCachedCompletionTypes')
--                             + asg.nodes('::clang::ASTUnit::getBufferForFile')
--                             + asg.nodes('::clang::CXXRecordDecl::getCaptureFields')
--                             + asg.nodes('::clang::ASTContext::SectionInfos')
--                             + asg.nodes('::clang::ASTContext::getAllocator')
--                             + asg.nodes('::clang::ASTContext::getObjCEncodingForFunctionDecl')
--                             + asg.nodes('::clang::ASTContext::getObjCEncodingForPropertyDecl')
--                             + asg.nodes('::clang::ASTContext::getObjCEncodingForMethodDecl')
--                             + asg.nodes('::clang::ASTContext::getAllocator')):
--                    node.boost_python_export = False
--
--            for header in (path(sys.prefix)/'include'/'clang').walkfiles('*.h'):
--                asg[header.abspath()].is_external_dependency = False
--            
--            return asg
--
--        autowig.controller['clanglite'] = clanglite_controller
--        autowig.controller.plugin = 'clanglite'
--        asg = autowig.controller(asg)
--
--        autowig.generator.plugin = 'boost_python_internal'
--        module = autowig.generator(asg,
--                                     module = self.srcdir/'_clanglite.cpp',
--                                     decorator = self.srcdir/'clanglite'/'_clanglite.py',
--                                     closure = False)
--
--        module.write()
diff --git a/conda/python-autowig/windows.patch b/conda/python-autowig/windows.patch
index 8fab893..2f74e95 100644
--- a/conda/python-autowig/windows.patch
+++ b/conda/python-autowig/windows.patch
@@ -1,21 +1,206 @@
+diff --git a/conda/python-autowig/windows.patch b/conda/python-autowig/windows.patch
+index 8fab893..e69de29 100644
+--- a/conda/python-autowig/windows.patch
++++ b/conda/python-autowig/windows.patch
+@@ -1,180 +0,0 @@
+-diff --git a/test/test_basic.py b/test/test_basic.py
+-index 05c2aa3..386bd8d 100644
+---- a/test/test_basic.py
+-+++ b/test/test_basic.py
+-@@ -88,13 +88,6 @@ class TestBasic(unittest.TestCase):
+-                                         decorator = self.tgt/'basic'/'_module.py',
+-                                         prefix = 'wrapper_')
+-         wrappers.write()
+--        
+--        print(self.tgt.parent.parent)
+--        print(self.tgt.parent.parent.abspath())
+--        subprocess.check_call(['scons', 'py', '-C', self.tgt.parent.parent.abspath()])
+--
+--    def test_pyclanglite_parser(self):
+--        """Test `pyclanglite` parser"""
+-         plugin = autowig.parser.plugin
+-         autowig.parser.plugin = 'pyclanglite'
+-         self.test_mapping_export()
+-diff --git a/test/test_feedback.py b/test/test_feedback.py
+-deleted file mode 100644
+-index eb09168..0000000
+---- a/test/test_feedback.py
+-+++ /dev/null
+-@@ -1,156 +0,0 @@
+--##################################################################################
+--#                                                                                #
+--# AutoWIG: Automatic Wrapper and Interface Generator                             #
+--#                                                                                #
+--# Homepage: http://autowig.readthedocs.io                                        #
+--#                                                                                #
+--# Copyright (c) 2016 Pierre Fernique                                             #
+--#                                                                                #
+--# This software is distributed under the CeCILL-C license. You should have       #
+--# received a copy of the legalcode along with this work. If not, see             #
+--# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
+--#                                                                                #
+--# File authors: Pierre Fernique <pfernique@gmail.com> (5)                        #
+--#                                                                                #
+--##################################################################################
+--
+--import unittest
+--import subprocess
+--from path import path
+--
+--import autowig
+--
+--class TestFeedback(unittest.TestCase):
+--    """Test the feedback of a SCons results"""
+--
+--    @classmethod
+--    def setUpClass(cls):
+--        with open('test.h', 'w') as filehandler:
+--            filehandler.write("""
+--#include <string>
+--
+--namespace test
+--{
+--    template<class T, class U>
+--    class Pair
+--    {
+--        public:
+--            Pair(const std::string& first, const std::string& second)
+--            { 
+--                this->first = first;
+--                this->second = second;
+--            };
+--
+--            void swap(const Pair< T, U >& pair)
+--            { this->first = pair.first; this->second = pair.second; }
+--
+--        protected:
+--            T first;
+--            U second;
+--    };
+--
+--    typedef Pair< const double, double > Point;
+--
+--    enum {
+--        RED,
+--        GREEN,
+--        BLUE
+--    };
+--
+--    int color;
+--}""")
+--
+--        with open('SConstruct', 'w') as filehandler:
+--            filehandler.write("""
+--from distutils import sysconfig
+--import sys
+--
+--variables = Variables()
+--
+--env = Environment()
+--variables.Update(env)
+--
+--env.AppendUnique(LIBS = ['boost_python', 'python' + sysconfig.get_python_version()])
+--env.AppendUnique(CPPPATH = [sysconfig.get_python_inc()])
+--env.AppendUnique(CPPDEFINES = ['BOOST_PYTHON_DYNAMIC_LIB'])
+--
+--env.Prepend(CPPPATH=sys.prefix + '/include')
+--env.Prepend(CPPPATH='.')
+--env.Prepend(LIBPATH=sys.prefix + '/lib')
+--
+--env.AppendUnique(CXXFLAGS = ['-x', 'c++',
+--                             '-std=c++0x',
+--                             '-Wwrite-strings'])
+--
+--pyenv = env.Clone()
+--#pyenv.AppendUnique(LIBS = ['basic'])
+--pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])
+--
+--wrap = pyenv.LoadableModule('_module', pyenv.Glob('wrapper_*.cpp') + ['_module.cpp'],
+--                            LDMODULESUFFIX = '.so',
+--                            FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress')
+--Alias("py", wrap)
+--Alias("build", wrap)
+--
+--Default("build")
+--""")
+--        autowig.parser.plugin = 'pyclanglite'
+--        autowig.generator.plugin = 'boost_python_internal'
+--        autowig.feedback.plugin = 'gcc-5'
+--        cls.srcdir = path('.').abspath()
+--
+--    def test_with_none_overload_export(self, overload="none"):
+--        """Test `feedback` with 'none' overload"""
+--
+--        for wrapper in self.srcdir.walkfiles('wrapper_*.cpp'):
+--            wrapper.unlink()
+--        wrapper = self.srcdir/'_module.h'
+--        if wrapper.exists():
+--            wrapper.unlink()
+--        wrapper = self.srcdir/'_module.py'
+--        if wrapper.exists():
+--            wrapper.unlink()
+--        wrapper = self.srcdir/'_module.cpp'
+--        if wrapper.exists():
+--            wrapper.unlink()
+--
+--        asg = autowig.AbstractSemanticGraph()
+--
+--        asg = autowig.parser(asg, [self.srcdir/'test.h'],
+--                                  ['-x', 'c++', '-std=c++11', '-I' + str(self.srcdir)],
+--                                  silent = True)
+--
+--        autowig.controller.plugin = 'default'
+--        autowig.controller(asg, overload=overload)
+--
+--        module = autowig.generator(asg, module = self.srcdir/'_module.cpp',
+--                                     decorator = self.srcdir/'_module.py',
+--                                     prefix = 'wrapper_')
+--
+--        from autowig._controller import cleaning
+--        cleaning(asg)
+--
+--        module.write()
+--
+--
+--        s = subprocess.Popen(['scons', 'py'],
+--                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+--        prev, curr = s.communicate()
+--
+--        while not prev == curr:
+--            prev = curr
+--            code = autowig.feedback(curr, '.', asg)
+--            if code:
+--                exec(code, locals())
+--
+--    def test_with_all_overload_export(self):
+--        """Test `feedback` with 'all' overload"""
+--        self.test_with_none_overload_export(overload="all")
+--
+--    def test_with_class_overload_export(self):
+--        """Test `feedback` with 'class' overload"""
+--        self.test_with_none_overload_export(overload="class")
+--
+--    def test_with_namespace_overload_export(self):
+--        """Test `feedback` with 'namespace' overload"""
+--        self.test_with_none_overload_export(overload="namespace")
 diff --git a/test/test_basic.py b/test/test_basic.py
-index 05c2aa3..386bd8d 100644
+index e911242..a88bb54 100644
 --- a/test/test_basic.py
 +++ b/test/test_basic.py
-@@ -88,13 +88,6 @@ class TestBasic(unittest.TestCase):
-                                         decorator = self.tgt/'basic'/'_module.py',
-                                         prefix = 'wrapper_')
-         wrappers.write()
--        
--        print(self.tgt.parent.parent)
--        print(self.tgt.parent.parent.abspath())
--        subprocess.check_call(['scons', 'py', '-C', self.tgt.parent.parent.abspath()])
--
+@@ -97,13 +97,6 @@ class TestBasic(unittest.TestCase):
+                               cwd=self.tgt.parent.parent,
+                               shell=True)
+ 
 -    def test_pyclanglite_parser(self):
 -        """Test `pyclanglite` parser"""
-         plugin = autowig.parser.plugin
-         autowig.parser.plugin = 'pyclanglite'
-         self.test_mapping_export()
+-        plugin = autowig.parser.plugin
+-        autowig.parser.plugin = 'pyclanglite'
+-        self.test_mapping_export()
+-        autowig.parser.plugin = plugin
+-
+     def test_boost_python_pattern_generator(self):
+         """Test `boost_python_pattern` generator"""
+         plugin = autowig.generator.plugin
 diff --git a/test/test_feedback.py b/test/test_feedback.py
 deleted file mode 100644
 index eb09168..0000000
diff --git a/test/test_feedback.py b/test/test_feedback.py
deleted file mode 100644
index eb09168..0000000
--- a/test/test_feedback.py
+++ /dev/null
@@ -1,156 +0,0 @@
-##################################################################################
-#                                                                                #
-# AutoWIG: Automatic Wrapper and Interface Generator                             #
-#                                                                                #
-# Homepage: http://autowig.readthedocs.io                                        #
-#                                                                                #
-# Copyright (c) 2016 Pierre Fernique                                             #
-#                                                                                #
-# This software is distributed under the CeCILL-C license. You should have       #
-# received a copy of the legalcode along with this work. If not, see             #
-# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
-#                                                                                #
-# File authors: Pierre Fernique <pfernique@gmail.com> (5)                        #
-#                                                                                #
-##################################################################################
-
-import unittest
-import subprocess
-from path import path
-
-import autowig
-
-class TestFeedback(unittest.TestCase):
-    """Test the feedback of a SCons results"""
-
-    @classmethod
-    def setUpClass(cls):
-        with open('test.h', 'w') as filehandler:
-            filehandler.write("""
-#include <string>
-
-namespace test
-{
-    template<class T, class U>
-    class Pair
-    {
-        public:
-            Pair(const std::string& first, const std::string& second)
-            { 
-                this->first = first;
-                this->second = second;
-            };
-
-            void swap(const Pair< T, U >& pair)
-            { this->first = pair.first; this->second = pair.second; }
-
-        protected:
-            T first;
-            U second;
-    };
-
-    typedef Pair< const double, double > Point;
-
-    enum {
-        RED,
-        GREEN,
-        BLUE
-    };
-
-    int color;
-}""")
-
-        with open('SConstruct', 'w') as filehandler:
-            filehandler.write("""
-from distutils import sysconfig
-import sys
-
-variables = Variables()
-
-env = Environment()
-variables.Update(env)
-
-env.AppendUnique(LIBS = ['boost_python', 'python' + sysconfig.get_python_version()])
-env.AppendUnique(CPPPATH = [sysconfig.get_python_inc()])
-env.AppendUnique(CPPDEFINES = ['BOOST_PYTHON_DYNAMIC_LIB'])
-
-env.Prepend(CPPPATH=sys.prefix + '/include')
-env.Prepend(CPPPATH='.')
-env.Prepend(LIBPATH=sys.prefix + '/lib')
-
-env.AppendUnique(CXXFLAGS = ['-x', 'c++',
-                             '-std=c++0x',
-                             '-Wwrite-strings'])
-
-pyenv = env.Clone()
-#pyenv.AppendUnique(LIBS = ['basic'])
-pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])
-
-wrap = pyenv.LoadableModule('_module', pyenv.Glob('wrapper_*.cpp') + ['_module.cpp'],
-                            LDMODULESUFFIX = '.so',
-                            FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress')
-Alias("py", wrap)
-Alias("build", wrap)
-
-Default("build")
-""")
-        autowig.parser.plugin = 'pyclanglite'
-        autowig.generator.plugin = 'boost_python_internal'
-        autowig.feedback.plugin = 'gcc-5'
-        cls.srcdir = path('.').abspath()
-
-    def test_with_none_overload_export(self, overload="none"):
-        """Test `feedback` with 'none' overload"""
-
-        for wrapper in self.srcdir.walkfiles('wrapper_*.cpp'):
-            wrapper.unlink()
-        wrapper = self.srcdir/'_module.h'
-        if wrapper.exists():
-            wrapper.unlink()
-        wrapper = self.srcdir/'_module.py'
-        if wrapper.exists():
-            wrapper.unlink()
-        wrapper = self.srcdir/'_module.cpp'
-        if wrapper.exists():
-            wrapper.unlink()
-
-        asg = autowig.AbstractSemanticGraph()
-
-        asg = autowig.parser(asg, [self.srcdir/'test.h'],
-                                  ['-x', 'c++', '-std=c++11', '-I' + str(self.srcdir)],
-                                  silent = True)
-
-        autowig.controller.plugin = 'default'
-        autowig.controller(asg, overload=overload)
-
-        module = autowig.generator(asg, module = self.srcdir/'_module.cpp',
-                                     decorator = self.srcdir/'_module.py',
-                                     prefix = 'wrapper_')
-
-        from autowig._controller import cleaning
-        cleaning(asg)
-
-        module.write()
-
-
-        s = subprocess.Popen(['scons', 'py'],
-                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-        prev, curr = s.communicate()
-
-        while not prev == curr:
-            prev = curr
-            code = autowig.feedback(curr, '.', asg)
-            if code:
-                exec(code, locals())
-
-    def test_with_all_overload_export(self):
-        """Test `feedback` with 'all' overload"""
-        self.test_with_none_overload_export(overload="all")
-
-    def test_with_class_overload_export(self):
-        """Test `feedback` with 'class' overload"""
-        self.test_with_none_overload_export(overload="class")
-
-    def test_with_namespace_overload_export(self):
-        """Test `feedback` with 'namespace' overload"""
-        self.test_with_none_overload_export(overload="namespace")
diff --git a/test/test_subset.py b/test/test_subset.py
deleted file mode 100644
index 4dfa28d..0000000
--- a/test/test_subset.py
+++ /dev/null
@@ -1,188 +0,0 @@
-##################################################################################
-#                                                                                #
-# AutoWIG: Automatic Wrapper and Interface Generator                             #
-#                                                                                #
-# Homepage: http://autowig.readthedocs.io                                        #
-#                                                                                #
-# Copyright (c) 2016 Pierre Fernique                                             #
-#                                                                                #
-# This software is distributed under the CeCILL-C license. You should have       #
-# received a copy of the legalcode along with this work. If not, see             #
-# <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html>.                 #
-#                                                                                #
-# File authors: Pierre Fernique <pfernique@gmail.com> (46)                       #
-#                                                                                #
-##################################################################################
-
-import os
-import unittest
-from path import path
-from git import Repo
-import subprocess
-import sys
-import __builtin__
-
-import autowig
-
-import time
-prev = time.time()
-
-class TemplateRender(object):
-
-    def __get__(self, obj, objtype, **kwargs):
-        code = obj.code
-        code = code.replace('\n    __M_caller = context.caller_stack._push_frame()', '', 1)
-        code = code.replace('\n    __M_caller = context.caller_stack._push_frame()', '', 1)
-        code = code.replace("        return ''\n    finally:\n        context.caller_stack._pop_frame()\n", "        return __M_string\n    except:\n        return ''", 1)
-        code = code.replace("context,**pageargs", "**context", 1)
-        code = code.replace("\n        __M_locals = __M_dict_builtin(pageargs=pageargs)", "", 1)
-        code = code.replace("__M_writer = context.writer()", "__M_string = u''")
-        code = code.replace("__M_writer(", "__M_string = operator.add(__M_string, ")
-        code = "import operator\n" + code
-        exec code in globals()
-        def __call__(**context):
-            for builtin in dir(__builtin__):
-                if not builtin in context:
-                    context[builtin] = getattr(__builtin__, builtin)
-            return globals()["render_body"](**context)
-        return __call__
-
-from autowig.boost_python_generator import Template
-
-Template.render = TemplateRender()
-
-from functools import wraps
-def wrapper(f):
-    @wraps(f)
-    def execfunc(self, *args, **kwargs):
-        #global prev
-        #if time.time() - prev >= 300:
-        #    sys.stdout.write('.')
-        #    sys.stdout.flush()
-        #    prev = time.time()
-        return f(self, *args, **kwargs)
-    return execfunc
-
-from autowig import libclang_parser
-for func in dir(libclang_parser):
-    if func.startswith('read_'):
-        setattr(libclang_parser, func, wrapper(getattr(libclang_parser, func)))
-
-from clanglite import autowig_parser
-for func in dir(autowig_parser):
-    if func.startswith('read_'):
-        setattr(autowig_parser, func, wrapper(getattr(autowig_parser, func)))
-
-class TestSubset(unittest.TestCase):
-    """Test the wrapping of a library subset"""
-
-    @classmethod
-    def setUpClass(cls):
-        autowig.parser.plugin = 'libclang'
-        srcdir = path('PyClangLite')
-        Repo.clone_from('https://github.com/StatisKit/PyClangLite.git', srcdir.relpath('.'))
-        cls.srcdir = srcdir/'src'/'py'
-        subprocess.check_output(['scons', 'cpp', '--prefix=' + sys.prefix, '--toolchain=' + os.environ.get('TOOLCHAIN')]
-                                cwd=cls.srcdir.parent.parent,
-                                shell=True)
-
-    def test_libclang_parser(self):
-        """Test `libclang` parser"""
-
-        for wrapper in self.srcdir.walkfiles('*.cpp'):
-            wrapper.unlink()
-
-        prefix = path(sys.prefix)
-
-        headers = [prefix/'include'/'clanglite'/'tool.h']
-
-        asg = autowig.AbstractSemanticGraph()
-        asg = autowig.parser(asg, headers,
-                             flags = ['-x', 'c++', '-std=c++11',
-                                      '-D__STDC_LIMIT_MACROS', '-D__STDC_CONSTANT_MACROS',
-                                      '-I' + str((prefix/'include').abspath()),
-                                      '-I' + str((prefix/'include').abspath()/'python2.7')],
-                             bootstrap = False,
-                             silent = True)
-
-        def clanglite_controller(asg):
-                            
-            for node in asg['::boost::python'].classes(nested = True):
-                node.is_copyable = True
-                
-            for node in asg.classes():
-                node.boost_python_export = False
-            for node in asg.enumerations():
-                node.boost_python_export = False
-            for node in asg.enumerators():
-                if node.parent.boost_python_export:
-                    node.boost_python_export = False
-                    
-            for node in asg.functions(free = True):
-                node.boost_python_export = False
-            for node in asg.variables(free = True):
-                node.boost_python_export = False
-                
-            from autowig.default_controller import refactoring
-            asg = refactoring(asg)
-            for fct in asg['::clanglite'].functions():
-                if not fct.localname == 'build_ast_from_code_with_args':
-                    fct.parent = fct.parameters[0].qualified_type.desugared_type.unqualified_type
-            
-            subset = []
-            classes = [asg['class ::clang::Type'], asg['class ::clang::Decl']]
-            subset += classes
-            subset += classes[0].subclasses(recursive=True)
-            subset += classes[1].subclasses(recursive=True)
-            subset.append(asg['class ::llvm::StringRef'])
-            subset.append(asg['class ::clang::ASTUnit'])
-            subset.append(asg['class ::clang::ASTContext'])
-            subset.append(asg['class ::clang::FileID'])
-            subset.append(asg['class ::clang::SourceLocation'])
-            subset.append(asg['class ::clang::CXXBaseSpecifier'])
-            subset.append(asg['class ::clang::DeclContext'])
-            subset.append(asg['enum ::clang::AccessSpecifier'])
-            subset.append(asg['enum ::clang::LinkageSpecDecl::LanguageIDs'])
-            subset.append(asg['enum ::clang::BuiltinType::Kind'])
-            subset.append(asg['enum ::clang::TemplateArgument::ArgKind'])
-            subset.append(asg['enum ::clang::Decl::Kind'])
-            subset.extend(asg['::boost::python'].classes(nested = True))
-            subset.extend(asg['::boost::python'].enumerations(nested = True))
-            subset.extend(asg.nodes('::clanglite::build_ast_from_code_with_args'))
-
-            for node in subset:
-                node.boost_python_export = True
-
-            if autowig.parser.plugin == 'libclang':
-                for node in (asg.functions(pattern='.*(llvm|clang).*_(begin|end)')
-                             + asg.functions(pattern='.*(llvm|clang).*getNameAsString')
-                             + asg.nodes('::clang::NamedDecl::getQualifiedNameAsString')
-                             + asg.nodes('::clang::ObjCProtocolDecl::collectInheritedProtocolProperties')
-                             + asg.nodes('::clang::ASTUnit::LoadFromASTFile')
-                             + asg.nodes('::clang::ASTUnit::getCachedCompletionTypes')
-                             + asg.nodes('::clang::ASTUnit::getBufferForFile')
-                             + asg.nodes('::clang::CXXRecordDecl::getCaptureFields')
-                             + asg.nodes('::clang::ASTContext::SectionInfos')
-                             + asg.nodes('::clang::ASTContext::getAllocator')
-                             + asg.nodes('::clang::ASTContext::getObjCEncodingForFunctionDecl')
-                             + asg.nodes('::clang::ASTContext::getObjCEncodingForPropertyDecl')
-                             + asg.nodes('::clang::ASTContext::getObjCEncodingForMethodDecl')
-                             + asg.nodes('::clang::ASTContext::getAllocator')):
-                    node.boost_python_export = False
-
-            for header in (path(sys.prefix)/'include'/'clang').walkfiles('*.h'):
-                asg[header.abspath()].is_external_dependency = False
-            
-            return asg
-
-        autowig.controller['clanglite'] = clanglite_controller
-        autowig.controller.plugin = 'clanglite'
-        asg = autowig.controller(asg)
-
-        autowig.generator.plugin = 'boost_python_internal'
-        module = autowig.generator(asg,
-                                     module = self.srcdir/'_clanglite.cpp',
-                                     decorator = self.srcdir/'clanglite'/'_clanglite.py',
-                                     closure = False)
-
-        module.write()
