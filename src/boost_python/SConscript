# vi:syntax=python 

Import("env")
boost_python_env = env.Clone()
#boost_python_env.AppendUnique(LIBS=[boost_python_env["libname"]])

boost_python_dir = boost_python_env.Dir('.') #.srcnode()
cpp_dir = boost_python_env.Dir("../cpp")
python_dir = boost_python_env.Dir('../vplants/autowig').srcnode()

import os, sys, re

build_dir = boost_python_env.subst("$build_dir")
if os.name == 'nt':
    SHLIBSUFFIX = '.pyd'
else:
    SHLIBSUFFIX = '.so'

#boost_python_env.AppendUnique(LINKFLAGS=['-unresolved-symbols=ignore-in-shared-libs'])
#env.AppendUnique(LIBPATH=['/usr/local/lib'])

#boost_python_env.AppendUnique(LIBS=[boost_python_env['libname']])

#boost_python_env['_LIBFLAGS'] = '-Wl,--start-group ' + env['_LIBFLAGS'] + ' -Wl,--end-group' 

_dirs = boost_python_env.ALEAGlobDir('*', dir= '.')

dirs = []

while len(_dirs) != 0:
    dir = _dirs.pop()
    dirs.append(dir)
    _dirs += boost_python_env.ALEAGlobDir('*', dir=dir)

sources = boost_python_env.ALEAGlob('*.cpp', dir='.')
for i in dirs:
    sources += boost_python_env.ALEAGlob('*.cpp', dir=i)

boost_python_env.AppendUnique(LIBPATH=['/usr/local/lib'])

boost_python_env.AppendUnique(CPPPATH=['/usr/local/include'])

boost_python_env.AppendUnique(LIBS=['boost_python',
                            'clangIndex',
                            'clangARCMigrate',
                            'clangRewriteFrontend',
                            'clangFormat',
                            'clangTooling',
                            'clangToolingCore',
                            'clangFrontend',
                            'clangDriver',
                            'clangSerialization',
                            'clangParse',
                            'clangSema',
                            'clangStaticAnalyzerCheckers',
                            'clangStaticAnalyzerCore',
                            'clangRewrite',
                            'clangAnalysis',
                            'clangEdit',
                            'clangASTMatchers',
                            'clangAST',
                            'clangLex',
                            'clangBasic',
                            'LLVMLTO',
                            'LLVMObjCARCOpts',
                            'LLVMLinker',
                            'LLVMBitWriter',
                            'LLVMIRReader',
                            'LLVMAsmParser',
                            'LLVMXCoreDisassembler',
                            'LLVMXCoreCodeGen',
                            'LLVMXCoreDesc',
                            'LLVMXCoreInfo',
                            'LLVMXCoreAsmPrinter',
                            'LLVMSystemZDisassembler',
                            'LLVMSystemZCodeGen',
                            'LLVMSystemZAsmParser',
                            'LLVMSystemZDesc',
                            'LLVMSystemZInfo',
                            'LLVMSystemZAsmPrinter',
                            'LLVMSparcDisassembler',
                            'LLVMSparcCodeGen',
                            'LLVMSparcAsmParser',
                            'LLVMSparcDesc',
                            'LLVMSparcInfo',
                            'LLVMSparcAsmPrinter',
                            'LLVMR600CodeGen',
                            'LLVMR600AsmParser',
                            'LLVMR600Desc',
                            'LLVMR600Info',
                            'LLVMR600AsmPrinter',
                            'LLVMPowerPCDisassembler',
                            'LLVMPowerPCCodeGen',
                            'LLVMPowerPCAsmParser',
                            'LLVMPowerPCDesc',
                            'LLVMPowerPCInfo',
                            'LLVMPowerPCAsmPrinter',
                            'LLVMNVPTXCodeGen',
                            'LLVMNVPTXDesc',
                            'LLVMNVPTXInfo',
                            'LLVMNVPTXAsmPrinter',
                            'LLVMMSP430CodeGen',
                            'LLVMMSP430Desc',
                            'LLVMMSP430Info',
                            'LLVMMSP430AsmPrinter',
                            'LLVMMipsDisassembler',
                            'LLVMMipsCodeGen',
                            'LLVMMipsAsmParser',
                            'LLVMMipsDesc',
                            'LLVMMipsInfo',
                            'LLVMMipsAsmPrinter',
                            'LLVMHexagonDisassembler',
                            'LLVMHexagonCodeGen',
                            'LLVMHexagonDesc',
                            'LLVMHexagonInfo',
                            'LLVMCppBackendCodeGen',
                            'LLVMCppBackendInfo',
                            'LLVMARMDisassembler',
                            'LLVMARMCodeGen',
                            'LLVMARMAsmParser',
                            'LLVMARMDesc',
                            'LLVMARMInfo',
                            'LLVMARMAsmPrinter',
                            'LLVMAArch64Disassembler',
                            'LLVMAArch64CodeGen',
                            'LLVMAArch64AsmParser',
                            'LLVMAArch64Desc',
                            'LLVMAArch64Info',
                            'LLVMAArch64AsmPrinter',
                            'LLVMAArch64Utils',
                            'LLVMDebugInfoPDB',
                            'LLVMTableGen',
                            'LLVMOrcJIT',
                            'LLVMInstrumentation',
                            'LLVMOption',
                            'LLVMX86Disassembler',
                            'LLVMX86AsmParser',
                            'LLVMX86CodeGen',
                            'LLVMSelectionDAG',
                            'LLVMAsmPrinter',
                            'LLVMX86Desc',
                            'LLVMMCDisassembler',
                            'LLVMX86Info',
                            'LLVMX86AsmPrinter',
                            'LLVMX86Utils',
                            'LLVMMCJIT', 
                            'LLVMDebugInfoDWARF',
                            'LLVMLineEditor',
                            'LLVMPasses', 
                            'LLVMipo',
                            'LLVMVectorize',
                            'LLVMInterpreter',
                            'LLVMExecutionEngine',
                            'LLVMRuntimeDyld', 
                            'LLVMCodeGen',
                            'LLVMTarget', 
                            'LLVMScalarOpts',
                            'LLVMProfileData',
                            'LLVMObject',
                            'LLVMMCParser',
                            'LLVMBitReader',
                            'LLVMInstCombine',
                            'LLVMTransformUtils', 
                            'LLVMipa', 
                            'LLVMMC', 
                            'LLVMAnalysis', 
                            'LLVMCore',
                            'LLVMSupport',
                            'rt',
                            'dl',
                            'tinfo',
                            'pthread',
                            'z',
                            'm'])

boost_python_env.ALEAWrapper('../vplants/autowig', "_"+env['libname'], sources)

#[re.sub('(.*)src', build_dir, source.abspath) for source in boost_python_dir.glob('*.cpp')]
#if len(sources) > 0:
#    target = python_dir.abspath+'/_autowig'+SHLIBSUFFIX
#    if os.name == 'nt':
#        wrap = boost_python_env.SharedLibrary(target, sources, SHLIBPREFIX = '')
#    elif sys.platform == 'darwin':
#        wrap = boost_python_env.LoadableModule(target, sources,
#                                  SHLIBPREFIX = '',
#                                  FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress',
#                                  SHLIBSUFFIX = SHLIBSUFFIX)
#    else:
#        wrap = boost_python_env.LoadableModule(target, sources,
#                                  SHLIBPREFIX = '')
#    Alias("boost_python", wrap)
#    Alias("build", wrap)
